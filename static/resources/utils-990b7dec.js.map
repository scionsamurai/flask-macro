{"version":3,"file":"utils-990b7dec.js","sources":["../../../src/pages/utils.js"],"sourcesContent":["\nexport const update_macro = async (to_update, inp_value, where_value, where='name') => {\n    const response = await fetch(`/update/macro`, {\n        method: 'POST',\n        body: JSON.stringify({\n            update: to_update,\n            value: inp_value,\n            where,\n            where_value,\n            })\n        });\n    return response\n}\n\nexport const update_commands = async (to_update, inp_value, where_value, where='name', and_where, and_equals) => {\n    const response = await fetch(`/update/commands`, {\n        method: 'POST',\n        body: JSON.stringify({\n            update: to_update,\n            value: inp_value,\n            where,\n            where_value,\n            and_where,\n            and_equals\n            })\n        });\n    return response\n}\n\nexport const move_command = async (macro_name, new_id, old_id) => {\n    const response = await fetch(`/move_comm`, {\n        method: 'POST',\n        body: JSON.stringify({\n            macro_name,\n            new_id,\n            old_id\n            })\n        });\n    return response\n}\n\nexport const locate_image = async (image_to_locate) => {\n    const response = await fetch(`/regioncheck`, {\n        method: 'POST',\n        body: JSON.stringify({\n            image_to_locate\n            })\n        });\n    return response\n}\n\nexport const delete_macro = async (where_value, where='name') => {\n    const response = await fetch(`/delete`, {\n        method: 'POST',\n        body: JSON.stringify({\n            where,\n            where_value,\n            })\n        });\n    return response\n}\n\nexport const del_command_func = (name_var, command_id, command_list) => {\n    const delete_command = async (command_id_var) => {\n        const response = await fetch(`/delete/command`, {\n            method: 'POST',\n            body: JSON.stringify({\n                name_var,\n                command_id_var\n                })\n            });\n        return response\n    }\n    delete_command(command_id);\n    let new_command_list = [];\n    command_list.forEach((command, index) => {\n        if (index > command_id) {\n            command[0] = command[0] - 1;\n            new_command_list = [...new_command_list, command];\n        } else if (index != command_id)\n            new_command_list = [...new_command_list, command];\n    })\n    // command_list = new_command_list;\n    return new_command_list;\n}\n\n\nexport const add_function = async (macro_name, comm_type, comm_value) => {\n    const response = await fetch(`/add_function`, {\n        method: 'POST',\n        body: JSON.stringify({\n            macro_name,\n            comm_type,\n            comm_value\n            })\n        });\n    return response\n}\n\nexport const add_listener= async () => {\n    const response = await fetch(`/word_listeners/add`, {\n        method: 'POST',\n        body: 'none'\n        });\n    return response\n}\n\nexport const delete_listener = async (listen_for_string) => {\n    const response = await fetch(`/word_listeners/delete`, {\n        method: 'POST',\n        body: JSON.stringify({\n            listen_for_string,\n            })\n        });\n    return response\n}\n\nexport const update_listener = async (column_to_update, update_to_value, where, where_equals) => {\n    const response = await fetch(`/word_listeners/update`, {\n        method: 'POST',\n        body: JSON.stringify({\n            column_to_update,\n            update_to_value,\n            where,\n            where_equals,\n            })\n        });\n    return response\n}\n\n"],"names":["update_macro","async","to_update","inp_value","where_value","where","fetch","method","body","JSON","stringify","update","value","update_commands","and_where","and_equals","move_command","macro_name","new_id","old_id","locate_image","image_to_locate","delete_macro","del_command_func","name_var","command_id","command_list","command_id_var","response","delete_command","new_command_list","forEach","command","index","add_function","comm_type","comm_value","add_listener","delete_listener","listen_for_string","update_listener","column_to_update","update_to_value","where_equals"],"mappings":"AACY,MAACA,EAAeC,MAAOC,EAAWC,EAAWC,EAAaC,EAAM,eACjDC,MAAM,gBAAiB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,OAAQT,EACRU,MAAOT,EACPE,QACAD,kBAMCS,EAAkBZ,MAAOC,EAAWC,EAAWC,EAAaC,EAAM,OAAQS,EAAWC,UACvET,MAAM,mBAAoB,CAC7CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBC,OAAQT,EACRU,MAAOT,EACPE,QACAD,cACAU,YACAC,iBAMCC,EAAef,MAAOgB,EAAYC,EAAQC,UAC5Bb,MAAM,aAAc,CACvCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBO,aACAC,SACAC,aAMCC,EAAenB,MAAOoB,SACRf,MAAM,eAAgB,CACzCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBW,sBAMCC,EAAerB,MAAOG,EAAaC,EAAM,eAC3BC,MAAM,UAAW,CACpCC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBL,QACAD,kBAMCmB,EAAmB,CAACC,EAAUC,EAAYC,KAC5BzB,OAAO0B,UACHrB,MAAM,kBAAmB,CAC5CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBc,WACAG,oBAGDC,EAEXC,CAAeJ,GACf,IAAIK,EAAmB,GASvB,OARAJ,EAAaK,SAAQ,CAACC,EAASC,KACvBA,EAAQR,GACRO,EAAQ,GAAKA,EAAQ,GAAK,EAC1BF,EAAmB,IAAIA,EAAkBE,IAClCC,GAASR,IAChBK,EAAmB,IAAIA,EAAkBE,GAAQ,IAGlDF,CAAgB,EAIdI,EAAejC,MAAOgB,EAAYkB,EAAWC,UAC/B9B,MAAM,gBAAiB,CAC1CC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBO,aACAkB,YACAC,iBAMCC,EAAcpC,eACAK,MAAM,sBAAuB,CAChDC,OAAQ,OACRC,KAAM,SAKD8B,EAAkBrC,MAAOsC,SACXjC,MAAM,yBAA0B,CACnDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB6B,wBAMCC,EAAkBvC,MAAOwC,EAAkBC,EAAiBrC,EAAOsC,UACrDrC,MAAM,yBAA0B,CACnDC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjB+B,mBACAC,kBACArC,QACAsC"}